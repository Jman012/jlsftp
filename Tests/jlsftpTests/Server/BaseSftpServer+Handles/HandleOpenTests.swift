import XCTest
import Combine
import NIO
import NIOTestUtils
import Logging
@testable import jlsftp

final class HandleOpenTests: XCTestCase {

	func testHandleOpenClose() {
		BaseSftpServerTests._testWithTemporaryFile(content: "abc", openFlags: [.read]) { _, _, _, _ in
			// Do nothing. Just open and close the file.
		}
	}

	func testHandleOpenUnknownFile() {
		BaseSftpServerTests.__withServer { eventLoop, server in
			// Open temporary file
			let openPacket: OpenPacket = .init(
				id: 1,
				filename: "/nonexistent.txt",
				pflags: [.read], // Use exclusive without create.
				fileAttributes: .empty)
			var lastReplyMessage: SftpMessage?
			let replyHandler: ReplyHandler = { message in
				lastReplyMessage = message
				return eventLoop.makeSucceededVoidFuture()
			}
			server.register(replyHandler: replyHandler)
			let message = SftpMessage(packet: .open(openPacket), dataLength: 0, shouldReadHandler: { _ in })
			XCTAssertNoThrow(try server.handle(message: message, on: eventLoop).wait())

			// Assert correct reply, extract handle
			guard let openReply = lastReplyMessage else {
				XCTFail()
				return
			}

			switch openReply.packet {
			case let .statusReply(statusReply):
				XCTAssertEqual(statusReply.id, 1)
				XCTAssertEqual(statusReply.statusCode, .noSuchFile)
			default:
				XCTFail()
			}
		}
	}

	static var allTests = [
		("testHandleOpenClose", testHandleOpenClose),
		("testHandleOpenUnknownFile", testHandleOpenUnknownFile),
	]
}
